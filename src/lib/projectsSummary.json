{"3yw": {"name": "3 Years War", "location": "me", "date": {"start": "2020-06-01", "end": "2020-09-01"}, "tools": ["js", "webgl", "socketio", "nodejs", "github"], "url": "3yw", "markdown": "3 Years War is a project I've created 3 times in different game engines, serving both as a \ngood way to get introduced to a system and as an opportunity to iteratively improve on the same project.\nThis final iteration was an attempt to get as bare-bones as possible for a web app, with minimal glue between its\npure JS and WebGL canvas. In doing so, I signed myself up for the common folly of having to make a game engine myself.\n\n\n# Features \n\n- Online Multiplayer and Basic Matchmaking (using socket.io)\n- Replay System\n- Both optimized via a deterministic logic engine seperated from rendering, taking cues from Rollback-based systems\n- Various necesary game engine prefabs, including:\n    - Menus\n    - Buttons (yes, that bare-bones)\n    - Animations\n"}, "dfaresearch": {"name": "DFA Research", "location": "ssu", "date": {"start": "2023-01-23", "end": "present"}, "tools": ["rust"], "url": "dfaresearch", "markdown": "due to the highly technical (and for many, boring) details of this project, this project description will be split up into two categories: a non-technical and a technical explanation.\n\n# non-technical\na regular expression can be thought of as a filter that lets in certain kinds of text and does not allow others. it has many limitations, but when something can be written as a regular expression, performance is extremely quick.\n\nfor example, a regular expression can be made that only accepts a string if it contains exactly one 1.\n\nsecondly, we are working with string rewriting systems (often formally referred to as Semi-Thue systems). An easy example of this actually comes in the form of a board game, Peg-solitaire. In Peg-solitaire, your goal is to make sure that there is only one peg remaining on the pegboard.\n\n![Depiction showing that 110 can become 001](projects/dfaresearch/diagrams/110->001.svg \"title\")\n*Mapping pegs to ones and zeroes*\n\nan excellent article by my professor and advisor on this project, Dr Ravikumar, proves that a regular expression can be made that filters only the strings that can be a winning peg-solitaire board.\n\nautomatically creating something that builds that regular expression is quite difficult, and it is the focus of my research. \n\nhere's the cool part: any program can be expressed as a series of string rewriting rules. automatic creation of similar regular expressions serves as a potentially extremely powerful source of optimization. currently performance requirements limit the scope of what programs can actually take advantage of this, and I do not want to give off the impression that this would work for any program. currently it would work for a very small selective group of toy programs but the idea that you can do it at all is extremely interesting and worth studying further.\n\n# technical"}, "downdetector": {"name": "Down Detector", "location": "lsa", "date": {"start": "2021-06-21", "end": "2021-09-21"}, "tools": ["python", "html", "github"], "url": "downdetector", "markdown": "The Down Detector was a project commissioned for me by Local Search Appeal in order to solve the visibility problem that they suffered with their websites. Before the Down Detector, they would only know that a site was down after receiving user complaints, which was often days or weeks after the actual outage had occurred and cost an untold amount in lost revenue. Beyond that, manual administration at the company meant that at certain times, phone numbers were being paid for but not being used,alongside other issues. \n\nTo solve this, Down Detector was created as a generalized hub to inform the company of any outages with any of their main services. Interfacing with a MySQL database, Down Detector maintained a list of all issues that it could monitor throughout the company, alongside when they first occurred.\n\nThe main heart of Down Detector was a cronjob on a single-core Ubuntu machine that would run our monitoring service. Based on a web-scraped copy of every domain the company needed to keep track of, more web scraping was performed on each site to check for outages or errors within commonly used site pages. Additionally, Down Detector interacted with the Call Tracking Metrics API to see if there were any potentially dormant accounts that might indicate an issue elsewhere within the company. Once any new changes had been added to the database, a list of any newfound issues would be sent via email to myself and our operations lead."}, "gfde": {"name": "Go Fish: Definitive Edition", "location": "ssu", "date": "2021-05-11", "tools": ["js", "webgl", "socketio", "nodejs"], "url": "gfde", "markdown": "This project was created in collaboration with Amit Deb and Bella Gonzalez.\n\nCreated in the span of a couple weeks, Go Fish: Definitive Edition was our final project for CS 370 (Problem Solving in a Team Environment). Being responsible for the internal game logic, graphics rendering, and some networking, there were some complex challenges to face in that time frame. Here's the architecture that I eventually devised:\n\nWorking off of my experience with 3 Years War, I buiilt a decoupled game logic and game rendering system. Additionally, much time was put into an animation queuing system that allowed for greater flexibility when writing game logic or networking. Completely separating logic and graphics allowed for no artifacts in networked play, and allowed all bot decision making to occur instantly and still have the resulting gameplay appear at a normal speed.\n\nAdditionally gameplay was deterministic using seeded RNG, allowing the only messages that needed to come over the network to be the number of bots/players, player names, RNG seed, and player actions."}, "newkirk": {"name": "Newkirk Award", "location": "ssu", "date": {"start": "2020-01-01", "end": "2020-07-01"}, "tools": ["python", "matplotlib", "cpp", "latex", "github"], "url": "newkirk", "markdown": "The Newkirk Award was an opportunity for students to write curriculum for SSU. Originally intended for upper-division students, Andrew Evans' proposal allowed him and I to write the curriculum for Computer Applications for Scientists. Currently taught as a mandatory upper-division Physics class at SSU, we were only able to write this material thanks to our combined knowledge. A project-based course, much of the lesson plan was oriented around creating an animated and accurate model of the solar system. My responsibilities in this project consisted mainly of three tasks:\n\n## 1. Lesson Planning\nCourse content was written mainly in LaTeX and consisted of 10 lessons each intended to be taught over the course of an hour. These went from a cursory understanding of Python and Matplotlib to the more advanced and complex systems that we were going to simulate. Andrew wrote the introduction to Python while I wrote largely about the middle of the course moving to the beginning of our physical simulations and a more in-depth look at Python, and we collaboratively worked on the plan for the final weeks. We were largely given free reign to guide the structure of the course as we saw fit.\n\n## 2. Homework Assignments\nAccompanying each lesson plan, homework was also given via LaTeX documents and step-by-step solutions were given to faculty as separate LaTeX/Python files. Written (unless I'm mistaken) mainly by me, each homework assignment consisted of a few short answer problems intended to take 1 to 2 hours. Additionally, given that it was a project-based course, part of the material for each assignment was using what had been learned to add to our simulation.\n\n## 3. Final Project\nBeing a project-based class, significant time was spent ensuring that the final project that we were working towards was reasonable to accomplish and that its steps were documented. Additionally, given that neither one of us had the expertise to make the final project solely on our own, intense collaboration was required in order to build our final result. In the end, we built a physically-accurate model of the solar system that included special relativity (in order to better simulate Mercury's orbit) alongside building a C++ version of the project made to run computationally expensive verification.\n"}, "super-marlo-64": {"name": "Spring Simulation", "location": "ssu", "date": "2022-05-18", "tools": ["js", "webgl", "github"], "url": "super-marlo-64", "markdown": "spring"}}